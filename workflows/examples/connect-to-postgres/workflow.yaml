apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: connect-to-pg-and-hello-world-
  labels:
    workflows.argoproj.io/archive-strategy: "false"
  annotations:
    workflows.argoproj.io/description: |
      This is a simple example that demonstrates how to connect to a PostgreSQL database and run a simple query.
spec:
  serviceAccountName: workflow
  entrypoint: connect-to-pg-and-hello-world
  templates:
  - name: connect-to-pg-and-hello-world
    container:
      image: alpine:latest
      command: ["/bin/sh", "-c"]
      args:
        - |-

          echo "Getting the postgresql-client package..."
          apk add --no-cache postgresql-client
          echo "Connecting to the PostgreSQL database..."

          echo "Doing a simple query..."
          psql postgresql://$POSTGRES_USER:$PGPASSWORD@postgresql.default.svc.cluster.local:5432/$POSTGRES_DB -c "SELECT 'Hello, world!';"

          # create a table dummy_table and insert a row
          echo "Creating a table..."
          psql -h postgresql.default.svc.cluster.local -p "5432" -U $POSTGRES_USER -d $POSTGRES_DB -c "CREATE TABLE IF NOT EXISTS dummy_table (id serial PRIMARY KEY, name VARCHAR(50));"

          # insert a row into the table
          echo "Inserting a row into the table..."
          psql -h postgresql.default.svc.cluster.local -p "5432" -U $POSTGRES_USER -d $POSTGRES_DB -c "INSERT INTO dummy_table (name) VALUES ('Hello, world!');"

          # # select all rows from the table
          echo "Selecting all rows from the table..."
          psql -h postgresql.default.svc.cluster.local -p "5432" -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT * FROM dummy_table;"

          # # alter the row
          echo "Altering the row..."
          psql -h postgresql.default.svc.cluster.local -p "5432" -U $POSTGRES_USER -d $POSTGRES_DB -c "UPDATE dummy_table SET name = 'Hello, world! Updated!' WHERE id = 1;"

          # # select all rows from the table
          echo "Selecting all rows from the table..."
          psql -h postgresql.default.svc.cluster.local -p "5432" -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT * FROM dummy_table;"

          echo "Success!"
          exit 0
      env:
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            name: postgres-credentials
            key: POSTGRES_USER
      - name: PGPASSWORD # This is the environment variable that the psql command will look for to authenticate with the PostgreSQL database.
        valueFrom:
          secretKeyRef:
            name: postgres-credentials
            key: POSTGRES_PASSWORD
      - name: POSTGRES_DB
        valueFrom:
          secretKeyRef:
            name: postgres-credentials
            key: POSTGRES_DB
